{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 glasses of water\n"
     ]
    }
   ],
   "source": [
    "y = 7\n",
    "h = 9\n",
    "l = \"glasses of water\"\n",
    "print h-y, l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "6+5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "9-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10/5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "38%14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5/4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "6//8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t = 6\n",
    "t < 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t >= 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t != 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    }
   ],
   "source": [
    "print int(\"1101\",2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.877\n"
     ]
    }
   ],
   "source": [
    "print round(3.87656,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print isinstance(4.5, int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1\n",
      "1\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "print cmp(4,10)\n",
    "print cmp (10,6)\n",
    "print cmp (12,12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78310985281\n"
     ]
    }
   ],
   "source": [
    "print pow (23,8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5]\n",
      "[2, 3, 4, 5, 6, 7, 8, 9]\n",
      "[3, 15, 27, 39, 51]\n"
     ]
    }
   ],
   "source": [
    "print range (6)\n",
    "print range (2,10)\n",
    "print range (3,54,12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n",
      "Hello Hello\n",
      "Learning Python\n",
      "Taking it slow\n"
     ]
    }
   ],
   "source": [
    "print 'hello'\n",
    "print \"Hello Hello\"\n",
    "print \"\"\"Learning Python\n",
    "Taking it slow\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello wow\n",
      "hellowow\n",
      "hello wow\n"
     ]
    }
   ],
   "source": [
    "xy= 'hello'\n",
    "z = 'wow'\n",
    "print xy,z\n",
    "print xy  +  z\n",
    "print 'hello %s'%z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['red', 'blue'], ['yellow', 'pink']]\n",
      "blue\n",
      "yellow\n"
     ]
    }
   ],
   "source": [
    "a = ['red','blue']\n",
    "b = ['yellow', 'pink']\n",
    "c = [a,b]\n",
    "print c\n",
    "print a [-1]\n",
    "print c [1][-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[24, 5]\n",
      "[1, 24, 5, 76]\n",
      "[76, 78, 90]\n",
      "6\n",
      "1\n",
      "90\n"
     ]
    }
   ],
   "source": [
    "color = [1,24,5,76,78,90]\n",
    "print color[1:3]\n",
    "print color[:4]\n",
    "print color[3:]\n",
    "print len(color)\n",
    "print min (color)\n",
    "print max(color)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "planets = ['venus','jupiter', 'mars','saturn']\n",
    "'pluto' in planets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "jupiter\n",
      "mars\n"
     ]
    }
   ],
   "source": [
    "print max(planets, key=len)\n",
    "print min(planets, key=len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 78, 45, 78, 9, 20, 89, [6, 9, 34, 25]]\n",
      "[3, 78, 45, 78, 9, 20, 89, [6, 9, 34, 25], 6, 9, 34, 25]\n",
      "1\n",
      "[3, 78, 45, 'yes', 78, 9, 20, 89, [6, 9, 34, 25], 6, 9, 34, 25]\n",
      "[3, 78, 45, 'no', 78, 9, 20, 89, [6, 9, 34, 25], 6, 9, 34, 25]\n",
      "[3, 78, 45, 78, 9, 20, 89, [6, 9, 34, 25], 6, 9, 34, 25]\n",
      "[25, 34, 9, 6, [6, 9, 34, 25], 89, 20, 9, 78, 45, 78, 3]\n",
      "[3, 6, 9, 9, 20, 25, 34, 45, 78, 78, 89, [6, 9, 34, 25]]\n",
      "[[6, 9, 34, 25], 89, 78, 78, 45, 34, 25, 20, 9, 9, 6, 3]\n"
     ]
    }
   ],
   "source": [
    "host = [3,78,45,78,9,20,89]\n",
    "host1 = [6,9,34,25]\n",
    "host.append(host1)\n",
    "print host\n",
    "host.extend(host1)\n",
    "print host\n",
    "print host.index(78)\n",
    "host.insert (3, 'yes')\n",
    "print host\n",
    "host[3] = 'no'\n",
    "print host\n",
    "host.remove ('no')\n",
    "print host\n",
    "host.reverse ()\n",
    "print host\n",
    "host.sort()\n",
    "print host\n",
    "host.sort(reverse= True)\n",
    "print host"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 4, 7, 9, 23]\n",
      "[3, 4, 7, 9, 23, 43]\n",
      "[3, 4, 7, 9, 23]\n"
     ]
    }
   ],
   "source": [
    "numerical1 = [3,4,7,9,23]\n",
    "numerical2 = numerical1[:]\n",
    "print numerical2\n",
    "numerical1.append(43)\n",
    "print numerical1\n",
    "print numerical2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6, 5, 7)\n",
      "('p', 'y', 't', 'h', 'o', 'n')\n",
      "randy joan kennedy\n",
      "1\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "random1 = tuple([6,5,7])\n",
    "random2 = tuple ('python')\n",
    "print random1\n",
    "print random2\n",
    "(r,j,k) = ('randy', 'joan', 'kennedy')\n",
    "print r, j, k\n",
    "print random2.count ('o')\n",
    "print random2.index ('h')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "set([9, 3, 4, 6, 7])\n",
      "set([9, 20, 6])\n",
      "set([3, 4, 6, 7, 9, 20])\n",
      "set([3, 4, 5, 6, 7, 9])\n",
      "set([9, 6])\n",
      "set([3, 4, 5, 7])\n"
     ]
    }
   ],
   "source": [
    "math1 = set([3,4,7,6,9,6,4])\n",
    "math2 = set ([6,9,20])\n",
    "print math1\n",
    "print math2\n",
    "print math1.union(math2)\n",
    "math1.add (5)\n",
    "print math1\n",
    "print math2.intersection (math1)\n",
    "print math1.difference (math2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bye\n"
     ]
    }
   ],
   "source": [
    "yes = 2\n",
    "if yes > 4 :\n",
    "    print 'hello'\n",
    "else :\n",
    "    print 'bye'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n",
      "It's 65 percent done\n"
     ]
    }
   ],
   "source": [
    "done = 65\n",
    "notdone = 45\n",
    "if notdone > done:\n",
    "    print 'notdone'\n",
    "elif done > notdone :\n",
    "    print 'done'\n",
    "    if done == 65:\n",
    "        print \"It's 65 percent done\"\n",
    "else :\n",
    "    print 'no clue'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "for h in range(7):\n",
    "    print h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no\n",
      "no\n",
      "ha\n"
     ]
    }
   ],
   "source": [
    "v = 4\n",
    "while v < 6:\n",
    "    print 'no'\n",
    "    v = v + 1\n",
    "print 'ha'    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 8, 13, 18, 23, 28]\n"
     ]
    }
   ],
   "source": [
    "new = []\n",
    "for h in range (1,30,5):\n",
    "    t = h + 2\n",
    "    new.append(t)\n",
    "print new    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[109, 110, 111, 112, 113, 114, 115, 116, 117]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[100 + x for x in range (9,18,1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dt = datetime.datetime(2010,12,1)\n",
    "last = datetime.datetime(2010,12,8)\n",
    "diff = datetime.timedelta (days=1)\n",
    "dates = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['12-01', '12-02', '12-03', '12-04', '12-05', '12-06', '12-07']\n"
     ]
    }
   ],
   "source": [
    "while dt < last :\n",
    "    dates.append(dt.strftime( '%m-%d'))\n",
    "    dt += diff\n",
    "print dates    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The method strftime () converts a tuple to a string as specified by format argument"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Date': ['12-01', '12-02', '12-03', '12-04', '12-05', '12-06', '12-07'], 'Paris': [2, -1, 0, -4, 7, 8, 9], 'Mumbai': [23, 24, 30, 32, 19, 20, 28], 'Tokyo': [3, 4, 6, 18, 7, 9, 2]}\n"
     ]
    }
   ],
   "source": [
    "d = {'Date': dates, 'Tokyo':[3,4,6,18,7,9,2], 'Paris':[2,-1,0,-4,7,8,9], 'Mumbai':[23,24,30,32,19,20,28] }\n",
    "print d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    23\n",
      "1    24\n",
      "2    30\n",
      "3    32\n",
      "4    19\n",
      "5    20\n",
      "6    28\n",
      "Name: Mumbai, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "temp = pd.DataFrame(d)\n",
    "ntemp = temp ['Mumbai']\n",
    "print ntemp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Mumbai  Paris  Tokyo\n",
      "Date                       \n",
      "12-01      23      2      3\n",
      "12-02      24     -1      4\n",
      "12-03      30      0      6\n",
      "12-04      32     -4     18\n",
      "12-05      19      7      7\n",
      "12-06      20      8      9\n",
      "12-07      28      9      2\n"
     ]
    }
   ],
   "source": [
    "temp = temp.set_index ('Date')\n",
    "print temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "crime = pd.read_csv('../data/crime.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Type of Crime</th>\n",
       "      <th>Crime</th>\n",
       "      <th>Year</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16417</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Property Crime</td>\n",
       "      <td>Motor vehicle theft</td>\n",
       "      <td>2001</td>\n",
       "      <td>696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16418</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Property Crime</td>\n",
       "      <td>Motor vehicle theft</td>\n",
       "      <td>2002</td>\n",
       "      <td>743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16419</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Property Crime</td>\n",
       "      <td>Motor vehicle theft</td>\n",
       "      <td>2003</td>\n",
       "      <td>798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16420</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Property Crime</td>\n",
       "      <td>Motor vehicle theft</td>\n",
       "      <td>2004</td>\n",
       "      <td>799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16421</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Property Crime</td>\n",
       "      <td>Motor vehicle theft</td>\n",
       "      <td>2005</td>\n",
       "      <td>739</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         State   Type of Crime                Crime  Year  Count\n",
       "16417  Wyoming  Property Crime  Motor vehicle theft  2001    696\n",
       "16418  Wyoming  Property Crime  Motor vehicle theft  2002    743\n",
       "16419  Wyoming  Property Crime  Motor vehicle theft  2003    798\n",
       "16420  Wyoming  Property Crime  Motor vehicle theft  2004    799\n",
       "16421  Wyoming  Property Crime  Motor vehicle theft  2005    739"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Motor vehicle theft                     2346\n",
       "Aggravated assault                      2346\n",
       "Forcible rape                           2346\n",
       "Murder and nonnegligent Manslaughter    2346\n",
       "Robbery                                 2346\n",
       "Burglary                                2346\n",
       "Larceny-theft                           2346\n",
       "Name: Crime, dtype: int64"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime.Crime.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pandas import Series, DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "np.random.seed (12345)\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rc ('figure', figsize = (10,6))\n",
    "PREVIOUS_MAX_ROWS = pd.options.display.max_rows\n",
    "pd.options.display.max_rows = 20\n",
    "np.set_printoptions (precision=4, suppress =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    2\n",
      "1    3\n",
      "2    1\n",
      "3    9\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "o = pd.Series([2,3,1,9])\n",
    "print o"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'a', u'e', u'y', u'r'], dtype='object')"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "o2 = pd.Series ([3,9,4,3], index = ['a', 'e', 'y', 'r'])\n",
    "o2\n",
    "o2.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    3\n",
       "y    7\n",
       "e    9\n",
       "dtype: int64"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "o2['a']\n",
    "o2 ['y'] =7\n",
    "o2 [['a','y','e']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'c' in o2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "blue      34\n",
      "pink       3\n",
      "red       65\n",
      "yellow    23\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "s1 = {'yellow': 23, 'blue':34 ,'red':65 , 'pink': 3}\n",
    "o3 = pd.Series(s1)\n",
    "print o3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "color\n",
      "blue      34\n",
      "pink       3\n",
      "red       65\n",
      "yellow    23\n",
      "Name: font, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "o3.name= 'font'\n",
    "o3.index.name= 'color'\n",
    "print o3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    color   font  size\n",
      "0     red   sans    12\n",
      "1  yellow  times     4\n",
      "2    blue  comic     5\n",
      "3   black  arial     7\n"
     ]
    }
   ],
   "source": [
    "data = {'color' :['red', 'yellow','blue', 'black'],\n",
    "        'font' :['sans', 'times', 'comic', 'arial'],\n",
    "        'size' : [12,4,5,7] }\n",
    "array = pd.DataFrame (data)\n",
    "print array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>size</th>\n",
       "      <th>font</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>red</td>\n",
       "      <td>12</td>\n",
       "      <td>sans</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>yellow</td>\n",
       "      <td>4</td>\n",
       "      <td>times</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>blue</td>\n",
       "      <td>5</td>\n",
       "      <td>comic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>black</td>\n",
       "      <td>7</td>\n",
       "      <td>arial</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    color  size   font\n",
       "0     red    12   sans\n",
       "1  yellow     4  times\n",
       "2    blue     5  comic\n",
       "3   black     7  arial"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame (data, columns= ['color', 'size','font'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'color', u'font', u'len', u'size'], dtype='object')"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array2 = pd.DataFrame (data, columns={'color', 'size', 'font','len'}, \n",
    "                       index = ['one', 'two', 'three', 'four'])\n",
    "array2\n",
    "array2.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "one       sans\n",
       "two      times\n",
       "three    comic\n",
       "four     arial\n",
       "Name: font, dtype: object"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array2 ['color']\n",
    "array2.font"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "color    black\n",
       "font     arial\n",
       "len        NaN\n",
       "size         7\n",
       "Name: four, dtype: object"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array2.loc['four']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>font</th>\n",
       "      <th>len</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>one</th>\n",
       "      <td>red</td>\n",
       "      <td>sans</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>two</th>\n",
       "      <td>yellow</td>\n",
       "      <td>times</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>three</th>\n",
       "      <td>blue</td>\n",
       "      <td>comic</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <td>black</td>\n",
       "      <td>arial</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        color   font  len  size\n",
       "one       red   sans  0.0    12\n",
       "two    yellow  times  1.0     4\n",
       "three    blue  comic  2.0     5\n",
       "four    black  arial  3.0     7"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array2 ['len'] = 45\n",
    "array2\n",
    "array2 ['len']= np.arange (4.)\n",
    "array2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>font</th>\n",
       "      <th>len</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>one</th>\n",
       "      <td>red</td>\n",
       "      <td>sans</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>two</th>\n",
       "      <td>yellow</td>\n",
       "      <td>times</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>three</th>\n",
       "      <td>blue</td>\n",
       "      <td>comic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <td>black</td>\n",
       "      <td>arial</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        color   font  len  size\n",
       "one       red   sans  NaN    12\n",
       "two    yellow  times  8.0     4\n",
       "three    blue  comic  NaN     5\n",
       "four    black  arial  7.0     7"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v= pd.Series ([8,7], index= ['two', 'four'])\n",
    "array2['len'] = v\n",
    "array2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>font</th>\n",
       "      <th>len</th>\n",
       "      <th>size</th>\n",
       "      <th>dull</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>one</th>\n",
       "      <td>red</td>\n",
       "      <td>sans</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>two</th>\n",
       "      <td>yellow</td>\n",
       "      <td>times</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>three</th>\n",
       "      <td>blue</td>\n",
       "      <td>comic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>four</th>\n",
       "      <td>black</td>\n",
       "      <td>arial</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        color   font  len  size   dull\n",
       "one       red   sans  NaN    12  False\n",
       "two    yellow  times  8.0     4  False\n",
       "three    blue  comic  NaN     5  False\n",
       "four    black  arial  7.0     7   True"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array2 ['dull']=array2.color == 'black'\n",
    "array2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>one</th>\n",
       "      <th>two</th>\n",
       "      <th>three</th>\n",
       "      <th>four</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>color</th>\n",
       "      <td>red</td>\n",
       "      <td>yellow</td>\n",
       "      <td>blue</td>\n",
       "      <td>black</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>font</th>\n",
       "      <td>sans</td>\n",
       "      <td>times</td>\n",
       "      <td>comic</td>\n",
       "      <td>arial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>len</th>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>size</th>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dull</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         one     two  three   four\n",
       "color    red  yellow   blue  black\n",
       "font    sans   times  comic  arial\n",
       "len      NaN       8    NaN      7\n",
       "size      12       4      5      7\n",
       "dull   False   False  False   True"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array2.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e    3\n",
      "k    4\n",
      "p    8\n",
      "s    1\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "r = pd.Series([3,4,8,1], index = ['e', 'k', 'p', 's'])\n",
    "print r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e    3.0\n",
      "k    4.0\n",
      "f    NaN\n",
      "p    8.0\n",
      "s    1.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "r1 = r.reindex(['e', 'k','f','p','s'])\n",
    "print r1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        font  size  len\n",
      "red        0     1    2\n",
      "yellow     3     4    5\n",
      "blue       6     7    8\n"
     ]
    }
   ],
   "source": [
    "d = pd.DataFrame(np.arange(9).reshape ((3,3)), index=['red','yellow','blue'], columns= ['font','size','len'])\n",
    "print d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>font</th>\n",
       "      <th>size</th>\n",
       "      <th>len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>yellow</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>blue</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        font  size  len\n",
       "yellow     3     4    5\n",
       "blue       6     7    8"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.drop (['red'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>three</th>\n",
       "      <th>one</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>yellow</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>red</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>blue</th>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>black</th>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        three  one\n",
       "yellow      2    0\n",
       "red         6    4\n",
       "blue       10    8\n",
       "black      14   12"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "od =pd.DataFrame(np.arange(16).reshape((4,4)), \n",
    "                 index= ['yellow','red','blue','black'], columns=['one', 'two', 'three', 'four'])\n",
    "od\n",
    "od['two']\n",
    "od[['three','one']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        one  two  three  four\n",
      "yellow    0    0      0     0\n",
      "red       0    5      6     7\n",
      "blue      8    9     10    11\n",
      "black    12   13     14    15\n"
     ]
    }
   ],
   "source": [
    "od < 5\n",
    "od [od < 5] = 0\n",
    "print od"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    0\n",
       "b    1\n",
       "c    2\n",
       "d    3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = pd.Series (range(4), index= ['a', 'b', 'c','d'])\n",
    "a.sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-4., -4., -4., -4.],\n",
       "       [ 0.,  0.,  0.,  0.],\n",
       "       [ 4.,  4.,  4.,  4.]])"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array = np.arange(12.).reshape((3,4))\n",
    "array\n",
    "array[1]\n",
    "array -array [1]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
